import os
import time
import dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import gspread
import sqlite3

from fuzzywuzzy import process

name = None
surname = None
phone_number = None
adress = None

NA_name = None
NA_tg_id = None

dotenv.load_dotenv(".env")
api_key = os.environ["TOKEN"]
g_table = os.environ["google_table"]
g_table_access = os.environ["table_access"]
questions_chat_id = os.environ["send_to_chat"]

bot = telebot.TeleBot(api_key)

gc = gspread.service_account(filename=g_table_access)
s = gc.open_by_url(g_table)
worksheet1 = s.worksheet("main_table")
worksheet2 = s.worksheet("FAQ")
list_of_lists = worksheet1.get_all_values()
list_of_questions = worksheet2.get_all_values()

category_list = []
for x in list_of_lists:
    if x[4] not in category_list:
        category_list.append(x[4])
del category_list[category_list.index('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')]

category_keyboard = InlineKeyboardMarkup()

for category in category_list:
    category_keyboard.add(InlineKeyboardButton(category, callback_data="aa" + category))
category_keyboard.add(InlineKeyboardButton("–°—Å—ã–ª–∫–∞", url=g_table))

questions_list = []
for x in list_of_questions:
    if x[1] not in questions_list:
        questions_list.append(x[1])
questions_list.remove("–í–æ–ø—Ä–æ—Å")

answers_list = []
for x in list_of_questions:
    if x[2] not in answers_list:
        answers_list.append(x[2])
answers_list.remove("–û—Ç–≤–µ—Ç")

QA_diction = dict(zip(questions_list, answers_list))

menu_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
menu_markup.row("–ü—Ä–æ–≥—Ä–∞–º–º—ã", "–†–µ–π—Ç–∏–Ω–≥")
menu_markup.row("F.A.Q", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")

app_diction = {}
for x in list_of_lists:
    app_diction[x[0]] = {}
    app_diction[x[0]]["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"] = x[1]
    app_diction[x[0]]["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"] = x[2]
    app_diction[x[0]]["–§–æ—Ç–æ"] = x[3]
    app_diction[x[0]]["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = x[4]

markup = InlineKeyboardMarkup()
markup.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="qq"))

markup_card = InlineKeyboardMarkup()
markup_card.add(InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="x"))


@bot.message_handler(commands=['admin'])
def admin_check(message):
    if message.text == "/admin":
        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        id_2check = message.from_user.id
        cur.execute("""SELECT * FROM admins WHERE tg_id = ?""", (id_2check,))
        data = cur.fetchone()
        print(data)
        if data[2] == id_2check and data[3] == 2:
            s_admin_keyb = InlineKeyboardMarkup(row_width=2)
            s_admin_keyb.add(InlineKeyboardButton("–ü–æ–Ω–∏–∑–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="AL"),
                             InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="AA"),
                             InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="RA"),
                             InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="DA"),
                             InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="UL"))

            bot.send_message(message.chat.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω!", reply_markup=s_admin_keyb)

        elif data[2] == id_2check and data[3] == 1:
            admin_keyb = InlineKeyboardMarkup(row_width=2)
            admin_keyb.add(InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="UL"))
            bot.send_message(message.chat.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=admin_keyb)
        else:
            pass
        cur.close()
        conn.close()


@bot.message_handler(commands=['new_admin'])
def new_admin(message):
    global NA_name, NA_tg_id
    conn = sqlite3.connect('users.db', check_same_thread=False)
    cur = conn.cursor()
    id_2check = message.from_user.id
    cur.execute("""SELECT * FROM admins WHERE tg_id = ?""", (id_2check,))
    data = cur.fetchone()
    print(data)
    if data[2] == id_2check and data[3] == 2:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞")
        bot.register_next_step_handler(message, new_admin_name)


def new_admin_name(message):
    global NA_name
    NA_name = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ tg_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞")
    bot.register_next_step_handler(message, id_save)


def id_save(message):
    global NA_tg_id
    NA_tg_id = message.text.strip()
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("""INSERT INTO admins (name, tg_id, STATUS) VALUES ('%s','%s','%s')""" % (NA_name, NA_tg_id, 1))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")


@bot.message_handler(commands=['start'])
def start(message):
    global name, surname, phone_number, adress, contacts
    conn = sqlite3.connect('users.db', check_same_thread=False)
    cur = conn.cursor()
    code = message.from_user.id
    cur.execute("""SELECT * FROM users WHERE unique_id = ?""", (code,))

    if cur.fetchone() is not None:
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)

    else:
        bot.send_message(message.chat.id,
                         "üëã, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–í–≤–µ–¥–∏ –∏–º—è:")  # NAME
        bot.register_next_step_handler(message, user_name_save)


def user_name_save(message):
    global name
    name = message.text.strip()
    bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ,{name}\n–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é:")  # SURNAME
    bot.register_next_step_handler(message, user_surname_save)


def user_surname_save(message):
    global surname
    surname = message.text.strip()
    bot.send_message(message.chat.id, " –í–∞—à –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    bot.register_next_step_handler(message, phone_number_save)


def phone_number_save(message):
    global phone_number
    phone_number = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    bot.register_next_step_handler(message, adress_save)


def adress_save(message):
    global adress
    adress = message.text.strip()
    bot.send_message(message.chat.id, "–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ, –æ—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏(—ç–ª. –ø–æ—á—Ç–∞,vk)")
    bot.register_next_step_handler(message, finish_reg)


def finish_reg(message):
    contacts = message.text.strip()
    unique_id = message.from_user.id
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute(
        """INSERT INTO users (name,surname,telephone,adress,contacts, unique_id) VALUES ('%s','%s','%s','%s','%s','%s')""" % (
            name, surname, phone_number, adress, contacts, unique_id))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n "
                                      f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {unique_id}",
                     reply_markup=markup)


@bot.message_handler(content_types=["text"])
def menu_buttons(message):
    global questions_list, answers_list
    if message.text == "–ü—Ä–æ–≥—Ä–∞–º–º—ã" or message.text == "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=category_keyboard)
    if message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        question_keyb = InlineKeyboardMarkup()
        question_keyb.add(InlineKeyboardButton("F.A.Q", callback_data="FQ"),
                          InlineKeyboardButton("–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="ZZ"))
        bot.send_message(message.chat.id,
                         f"–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ F.A.Q",
                         reply_markup=question_keyb)
    if message.text == "F.A.Q":
        faq_keyb = InlineKeyboardMarkup()
        faq_keyb.add(InlineKeyboardButton("F.A.Q", url="https://t.me/+A1cBuW4XadExM2Q6"))
        bot.send_message(message.chat.id, text="F.A.Q –∑–¥–µ—Å—å", reply_markup=faq_keyb)
    if "???" in message.text:
        stars_keyb = InlineKeyboardMarkup()
        a = process.extract(message.text, questions_list, limit=1)
        percents = a[0]
        print("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:", percents)
        if percents[1] >= 60:
            stars_keyb = InlineKeyboardMarkup(row_width=5)
            stars_keyb.add(InlineKeyboardButton(text="1‚≠ê", callback_data="1‚≠ê"),
                           InlineKeyboardButton(text="2‚≠ê", callback_data="2‚≠ê"),
                           InlineKeyboardButton(text="3‚≠ê", callback_data="3‚≠ê"),
                           InlineKeyboardButton(text="4‚≠ê", callback_data="4‚≠ê"),
                           InlineKeyboardButton(text="5‚≠ê", callback_data="5‚≠ê"))
            bot.send_message(chat_id=message.chat.id,
                             text="–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É!")
            bot.send_message(chat_id=message.chat.id,
                             text=f"{QA_diction[percents[0]]}\n\n–û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω",
                             reply_markup=stars_keyb)
        else:
            bot.send_message(chat_id=message.chat.id,
                             text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
            bot.send_message(chat_id=questions_chat_id, text=f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤–æ–ø—Ä–æ—Å üëá")
            bot.forward_message(chat_id=questions_chat_id, from_chat_id=message.chat.id, message_id=message.message_id)
    if "!!!" in message.text:
        menu_markup = InlineKeyboardMarkup()
        menu_markup.add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="qq"))
        bot.send_message(chat_id=questions_chat_id, text="üì©–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏üëá")
        bot.forward_message(chat_id=questions_chat_id, from_chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(chat_id=message.chat.id,
                         text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, –≤–∞—à–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!",
                         reply_markup=menu_markup)
    if message.text == "–†–µ–π—Ç–∏–Ω–≥":
        top_keyb = InlineKeyboardMarkup()
        top_keyb.add(InlineKeyboardButton("–¢–û–ü —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö", callback_data="TR"),
                     InlineKeyboardButton("–¢–û–ü —á–∞—Å—Ç—ã—Ö", callback_data="TP"))
        bot.send_message(chat_id=message.chat.id, text="–†–µ–π—Ç–∏–Ω–≥ –¢–û–ü-5 –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=top_keyb)


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id, )
    id = call.message.chat.id
    flag = call.data[:2]
    data = call.data[2:]
    print("flag = ", flag)
    print("data = ", data)

    if flag == "qq":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(id, "üéä–ú–µ–Ω—éüéä", reply_markup=menu_markup)

    if flag == "aa":
        apps = []
        for list_ in list_of_lists:
            if list_[4] == data and list_[0] not in apps:
                apps.append(list_[0])

        apps_keyb = InlineKeyboardMarkup()
        for app in apps:
            apps_keyb.add(InlineKeyboardButton(app, callback_data="22" + app))
        apps_keyb.add(InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data="MM"))
        bot.edit_message_text(chat_id=id, message_id=call.message.message_id,
                              text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{data}"', reply_markup=apps_keyb)

    if flag == "22":
        global instr_keyb
        instr_keyb = InlineKeyboardMarkup()
        instr_keyb.add(InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="++" + data))
        instr_keyb.add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="MM"))
        # buf = ''
        for list_ in list_of_lists:
            if list_[0] == data:
                # buf = x[0]
                bot.send_photo(id, photo=f"{list_[3]}", caption=f"{list_[0]}\n{list_[1]}", reply_markup=instr_keyb)

    if flag == "++":
        info_keyb = InlineKeyboardMarkup()
        info_keyb.add(InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="??" + data))
        info_keyb.add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="MM"))
        info_keyb.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="--" + data))

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=f"{data}\n{app_diction[data]['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']}", reply_markup=info_keyb)
    if flag == "??":
        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=f"{data}\n{app_diction[data]['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']}", reply_markup=instr_keyb)

    if flag == "MM":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(chat_id=id, text="–ú–µ–Ω—é", reply_markup=menu_markup)

    if flag == "ZZ":
        bot.send_message(chat_id=id, text=f'üìù–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É‚úç\n\n'
                                          '–í –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–∞(???)')
    if flag == "--":
        sure_keyb = InlineKeyboardMarkup()
        sure_keyb.add(InlineKeyboardButton("–î–∞", callback_data="Ys"), InlineKeyboardButton("–ù–µ—Ç", callback_data="No"))
        bot.send_message(chat_id=call.message.chat.id, text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é?",
                         reply_markup=sure_keyb)
    if flag == "No":
        bot.delete_message(chat_id=id, message_id=call.message.message_id)
    if flag == "Ys":
        bot.send_message(chat_id=id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ö –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
                                          "–í –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–∞ (!!!)")

    if flag[1] == "‚≠ê":
        global questions_list, answers_list
        a = process.extract(call.message.text, questions_list, limit=1)
        percents = a[0]
        stars = flag[0]
        print(stars)
        conn = sqlite3.connect('users.db', check_same_thread=False)
        cur = conn.cursor()
        ans = call.message.text.replace('–û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω', '').strip()
        print(str(ans))
        cur.execute(
            f"""UPDATE QA_ratings SET number_of_ratings = number_of_ratings + 1, average_score = ((average_score * number_of_ratings)+{stars})/(number_of_ratings + 1) WHERE answer = '{ans}';""")
        conn.commit()
        cur.close()
        conn.close()
        bot.edit_message_text(chat_id=id, message_id=call.message.message_id,
                              text=f"{QA_diction[percents[0]]}\n\n–û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω",
                              reply_markup=None)
        bot.send_message(chat_id=id, text="–í–∞—à –æ—Ç–∑—ã–≤ —É—á—Ç—ë–Ω!")

    if flag == "AL":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        STATUS = 1
        cur.execute("""SELECT * FROM admins WHERE STATUS = ?""", (STATUS,))
        data = cur.fetchall()
        print(data)
        admins_listing = InlineKeyboardMarkup()

        for el in data:
            admins_listing.add(InlineKeyboardButton(text=el[1], callback_data="ai" + str(el[2])))
        bot.send_message(id, "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", reply_markup=admins_listing)

    if flag == "ai":
        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        admin_data = call.data.replace("ai", "")
        cur.execute("""UPDATE admins
        SET STATUS = 0
        WHERE tg_id =?""", (admin_data,))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(chat_id=call.message.chat.id, text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω")

    if flag == "AA":
        bot.send_message(id, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /new_admin")
    if flag == "DA":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        STATUS = 0
        cur.execute("""SELECT * FROM admins WHERE STATUS = ?""", (STATUS,))
        data = cur.fetchall()
        print(data)
        admins_listing = InlineKeyboardMarkup()

        for el in data:
            admins_listing.add(InlineKeyboardButton(text=el[1], callback_data="ai" + str(el[2])))
        bot.send_message(id, "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", reply_markup=admins_listing)
        bot.send_message(id, "–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–Ω–∏–∑—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞")

    if flag == "RA":
        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        STATUS = 0
        cur.execute("""SELECT * FROM admins WHERE STATUS = ?""", (STATUS,))
        data = cur.fetchall()
        print(data)
        admins_listing = InlineKeyboardMarkup()
        for el in data:
            admins_listing.add(InlineKeyboardButton(text=el[1], callback_data="re" + str(el[2])))
        bot.send_message(id, "–°–ø–∏—Å–æ–∫ –±—ã–≤—à–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", reply_markup=admins_listing)
        bot.send_message(id, "–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –Ω–µ–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å")

    if flag == "re":
        admin_id = call.data.replace('re', "")
        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        cur.execute(f"""UPDATE admins SET STATUS = 1 WHERE tg_id = {admin_id}""")
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(chat_id=call.message.chat.id, text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    if flag == "TR":
        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        cur.execute(f"""SELECT * FROM QA_ratings ORDER BY average_score DESC LIMIT 5""")
        top5 = cur.fetchmany(5)
        bot.send_message(chat_id=call.message.chat.id, text="–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤‚¨á")

        for el in top5:
            bot.send_message(chat_id=call.message.chat.id, text=f"–í–æ–ø—Ä–æ—Å: {el[1]}\n{round(el[3], 2)}‚≠ê")
            time.sleep(0.5)
        bot.send_message(chat_id=call.message.chat.id, text="–í–æ–ø—Ä–æ—Å—ã?üòé")
        conn.commit()
        cur.close()
        conn.close()

    if flag == "TP":
        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        cur.execute(f"""SELECT * FROM QA_ratings ORDER BY number_of_ratings DESC LIMIT 5""")
        top5 = cur.fetchmany(5)
        bot.send_message(chat_id=call.message.chat.id, text="–¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤üëá")

        for el in top5:
            bot.send_message(chat_id=call.message.chat.id, text=f"–í–æ–ø—Ä–æ—Å: {el[1]}\n–ë—ã–ª –∑–∞–¥–∞–Ω {el[4]} —Ä–∞–∑!")
            time.sleep(0.5)
        bot.send_message(chat_id=call.message.chat.id, text="–í–æ üóøüëçüèΩ")

        conn.commit()
        cur.close()
        conn.close()
    if flag == "FQ":
        faq_keyb = InlineKeyboardMarkup()
        faq_keyb.add(InlineKeyboardButton("F.A.Q", url="https://t.me/+A1cBuW4XadExM2Q6"))
        bot.send_message(call.message.chat.id, text="F.A.Q –∑–¥–µ—Å—å", reply_markup=faq_keyb)
    if flag == "UL":
        conn = sqlite3.connect("users.db", check_same_thread=False)
        cur = conn.cursor()
        cur.execute(f"""SELECT * FROM users""")
        people = cur.fetchall()
        print(people)
        for user in people:
            bot.send_message(chat_id=call.message.chat.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[1], user[2].strip()}\n"
                                                                f"–ú–æ–±.—Ç–µ–ª: {user[3]}\n"
                                                                f"–ê–¥—Ä–µ—Å: {user[4]}\n"
                                                                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user[5]}\n"
                                                                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {user[6]}")
            time.sleep(0.3)


print('Ready')
bot.infinity_polling()
